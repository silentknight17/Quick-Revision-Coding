                                Short Defintions

1) Path between two vertices - All vertices which come in the path of two given
vertices is called their path.

2) Connected Graph- Each node has path from every other node.

3) Connected Components- Each connected graph in a disconnected graph is 
called a connected component.

4) Tree- Connected Acyclic graph.

Properties of Tree with n nodes->
 (i) Number of edges=n-1
 (ii) There are no cycles present.
 (iii) Each node has path from every other vertex.

5) Complete Graph - A graph in which each vertex is connected to every 
other vertex by a direct edge.

Properties of Complete Graph->
(i) Number of edges in a complete graph = nC2 =(n*(n-1))/2.

6) Representation of graphs->
(i) In the form of adjacenecy matrix.
(ii) In the form of adjacenecy graph.

Topological Sort-> It is an ordering of the nodes in a directed graph where 
for each directed edge from node A to node B, node A appears before node B 
in the ordering.

Note: 1)Topological orderings are not unique.
2) Topological sort occurs for only DAG(Directed Acyclic Graph).

Bipartite Graph-> 
1)It's vertices can be divided into two disjoint and independent sets U and V such that
every edge connects a vertex in U to one in V.

2)The graph does not contain any odd-length cycles.

3) The graph is 2 colorable.

If any of the above conditions are true, then all the conditions will be true.


Disjoint Set Union->

In this we denote the set by a leader, say 
A={1,2,,3,4}; suppose leader of A=2. B={5,6,7,8}; leader of B is 7.
Then we can find the union of the two sets by comparing their leaders.

Now, time complexities---->

       O(N) ----------> O(log N) ----------> O(alpha(N))= O(1), where alpha(N) is known as inverse Ackerman Constant.
    Union-find         Path Compression     Union by Rank/Size

Minimum Spanning Tree---->

1) Kruskal's Algorithm-> 
a) Sort the edges in increasing order of their weights.
b) Iterate in the sorted edges,
if inclusion of ith edge leades to a cycle, then skip this edge.
else, include the edge in the MST.

Time Complexity: O(Elog V)
Space Complexity: O(E+V)

Kruskal's Algorithm makes use of Disjoint Set-Union Algorithm.

2) Prims Algorithm-> Based on Greedy Paradigm.
Unlike an edge in Kruskal's, we add vertex to the growing spanning tree in Prim's.

Algorithm Steps:

Maintain two disjoint sets of vertices. One containing vertices that are in the growing spanning tree and other that are not in the growing spanning tree.

Select the cheapest vertex that is connected to the growing spanning tree and is not in the growing spanning tree and add it into the growing spanning tree.
This can be done using Priority Queues.
 Insert the vertices, that are connected to growing spanning tree, into the Priority Queue.
Check for cycles. To do that, mark the nodes which have been already selected and insert only those nodes in the Priority Queue that are not marked.

Time Complexity=O((V+E) log V)

Shortest Path Alogorithms->

1) Dijsktra's Algorithm-> 
IDEA--->

Set all vertices distances = infinity except for the source vertex, set the source distance = 0.
Push the source vertex in a min-priority queue in the form (distance , vertex), as the comparison in the min-priority queue will be according to vertices distances.
Pop the vertex with the minimum distance from the priority queue (at first the popped vertex = source).
Update the distances of the connected vertices to the popped vertex in case of "current vertex distance + edge weight < next vertex distance", then push the vertex
with the new distance to the priority queue.
If the popped vertex is visited before, just continue without using it.
Apply the same algorithm again until the priority queue is empty.


2) Bellman Ford Algorithm->
Bellman Ford's algorithm is used to find the shortest paths from the source vertex to all other vertices in a weighted graph. It depends on the following concept: Shortest path contains at most n-1 edges, because the shortest path couldn't have a cycle.

Algorithm->
1) The outer loop traverses from 0 to n-1 (the maximum number of edges)
2) Loop over all edges, check if the next node distance > current node distance + edge weight, in this case update the next node distance to "current node distance + edge weight".

This algorithm depends on the relaxation principle where the shortest distance for all vertices is gradually replaced by more accurate values until eventually reaching the optimum solution. In the beginning all vertices have a distance of "Infinity", but only the distance of the source vertex =0, then update all the connected vertices with the new distances (source vertex distance + edge weights), then apply the same concept for the new vertices with new distances and so on.

Advantages->
1) It can be used to for negative weights as well.
2) It can be used to detect negative cycle.

